import java.util.Scanner;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    static Double exponent;
    static String thisStringIsneedeToRecursionISuspect; //naezzelmiafasztcsinaljak,hogy tudjam hasznalni meg egyebkent is mi a faszom ez a lathatosag GRRR
    public static void main(String[] args) {
        String binaryConvertedValue;
        exponent = 31.0;
        thisStringIsneedeToRecursionISuspect = "";
        Double somethingHelps = Math.pow(2,3);
        int originalInt = somethingHelps.intValue()+1;//getIntToConvert();
        //binaryConvertedValue = Integer.toBinaryString(originalInt);
        binaryConvertedValue = convertIntegerToBinaryString(originalInt);
        System.out.println("Original value is: "+originalInt+" binary converted value: "+binaryConvertedValue);
        System.out.println("java calculated value: " + Integer.toBinaryString(originalInt));
    }

    public static String convertIntegerToBinaryString(int originalInt) {
        if (0 == originalInt) return "0";
        if (0<originalInt) {
            try {
                convertPositiveInt(originalInt);
            } catch (Exception e) {

            }
            return thisStringIsneedeToRecursionISuspect;//convertPositiveInt(originalInt);
        } else return convertNegativeInt(originalInt);
    }

    public static String convertNegativeInt(int originalInt) {
        return "";
    }

    public static void convertPositiveInt(int originalInt) throws Exception {
        if (0>exponent) {
            throw new Exception("exponent is 0");
        }
        Double twoExponentedDouble = Math.pow(2,exponent);
        int twoExponent = twoExponentedDouble.intValue();
        if (originalInt >= twoExponent){
            originalInt -= twoExponent;
            exponent -= 1;
            thisStringIsneedeToRecursionISuspect += "1";
            convertPositiveInt(originalInt);
        } else {
            exponent -= 1;
            thisStringIsneedeToRecursionISuspect += "0";
            convertPositiveInt(originalInt);
        }
        System.out.println(exponent.intValue() + " , " + twoExponent + " a string " + thisStringIsneedeToRecursionISuspect);
    }

    public int getIntToConvert() {
        Scanner sc = new Scanner(System.in);
        int i = 0;
        boolean isConversionSuccess = false;
        do {
            System.out.println("What to convert to binary?");
            try {
                i = Integer.valueOf(sc.nextLine());
                isConversionSuccess = true;
            }
            catch (NumberFormatException e){
                isConversionSuccess = false;
            }
        } while (!isConversionSuccess);
        return i;
    }
}

